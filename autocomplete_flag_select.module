<?php
/**
 * Implementation of hook_help()
 */
function autocomplete_flag_select_help($path, $args) {
  if ($path == 'admin/help#autocomplete-flag-select') {
    $output = '<p>Allows you to flag a user with one of your nodes</p>';
    return $output;
  }
}

/**
 * Implementation of hook_menu()
 */
function  autocomplete_flag_select_menu() {   
  $items['admin/build/autocomplete_flag_select'] = array(
    'title' => 'Autocomplete flag select',
    'description' => 'Configure the autocomplete flag select.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocomplete_flag_select_settings_form'),
    'access arguments' => array(1),
    'file' => 'autocomplete_flag_select.admin.inc',
  );
  
  $items["autocomplete_flag_select/autocomplete"] = array(
    'title' => 'Autocomplete flag select',
    'page callback' => 'autocomplete_flag_select_autocomplete',
    'access callback' =>TRUE,
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
   );
  return $items;
}

/**
 * Implementation of hook_block()
 */
function autocomplete_flag_select_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  $select_type = variable_get('autocomplete_flag_permission_types', array());
   switch ($op) {
     //Define the block
     case 'list':
       $blocks[0]['info'] = t('Autocomplete flag select');
       return $blocks;
        
     case 'view':
     if (arg(0) == 'user' && is_numeric(arg(1))) {
      if (!empty($select_type)){      
       $block['content'] = drupal_get_form('autocomplete_flag_select_form', 'block'); 
       return $block;
      }
     }  
   }
}

/**
* Implementation of hook_form()
*/
function autocomplete_flag_select_form() {
  $form = array();

  global $user;
  // get user to be flag
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $form['flagged_user'] = array(
      '#type' => 'value',
      '#value' => arg(1)
     );
  }
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#description' => t('Please enter node title to flag the user with.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => 'autocomplete-flag-select'),
  );

  $form['fields']['node'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#autocomplete_path' => "autocomplete_flag_select/autocomplete",
  );

  // use custom submit handler
  $form['fields']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Shortlist'),
    '#submit' => array('autocomplete_flag_select_form_submit'),
  );

  return $form;
}

/**
 * Implementation of hook_submit()
 */
function autocomplete_flag_select_form_submit($form, &$form_state) {
  // Get the nid from submitted node title
  $start = strripos($form_state['values']['node'], '[nid:')+5;
  $nid = substr($form_state['values']['node'], $start, -1);
  
  $flag_get = variable_get('autocomplete_flag_select_flag_type', '');
  if(!empty($flag_get)) {
    // switch user to correct user for flagging
    global $user;
    $curren_user = $user;
    session_save_session(FALSE);
    $user = user_load($form_state['values']['flagged_user']);
    // Flag node
    $flag = flag_get_flag($flag_get) or die('no ' . $flag_get . ' flag defined');
    if (!$flag->is_flagged($nid)) {
      $flag->flag('flag', $nid);
    	drupal_set_message($flag->flag_message);
    }
    // switch user back to correct user
    $user = $curren_user;
    session_save_session(TRUE);
  }
}

function _autocomplete_flag_select_nodes_flagged(){
  global $user;
  // Get the content type to search for.
  $content_type = variable_get('autocomplete_flag_select_node_type', '');
  $matches = array();
  // create the SQL to query the node table
  // $sql = db_query("SELECT f.fid FROM {flag_content} WHERE f.fid = %d AND u.uid = %d", $this->fid, $uid);
  // $sql = db_query("SELECT f.fid FROM {flag_content} WHERE f.fid = %d AND u.uid = %d", $this->fid, $uid);
  // $result = db_query('SELECT f.filepath, f.timestamp FROM {node} n INNER JOIN {content_type_resume_file} r ON n.nid = r.nid INNER JOIN {files} f ON f.fid = r.field_resume_file_fid WHERE n.uid = %d AND n.type = \'%s\'', $uid, 'resume_file');
  
  $fid = variable_get('autocomplete_flag_select_flag_type', '');
  $sql = db_query("SELECT n.nid, n.title FROM {node} n INNER JOIN {flag_content} f ON n.nid = f.content_id WHERE n.status = 1 AND n.uid = %d AND n.type = '%s'", $user->uid, $content_type);
   
  while ($row = db_fetch_array($sql)) {
    dpm($row);
    // return $matches[$row['title']] = check_plain($row['uid']);
  }
  
  // return '';
  // return $matches;
}

/**
 * Implementation of hook_autocomplete()
 */
function autocomplete_flag_select_autocomplete($string) {
  global $user;
  // Get the content type to search for.
  $select_type = variable_get('autocomplete_flag_select_node_type', '');
  $matches = array();
  // create the SQL to query the node table
  $sql = "SELECT n.nid, n.title FROM {node} n WHERE n.status = 1 AND n.type = '%s' AND lower(n.title) LIKE lower('%%%s%%') AND n.uid = %d ORDER BY n.title ASC";

  // query the database
  if (!empty($select_type)) {
    $res = db_query_range($sql, $select_type, $string, $user->uid, 0, 10);
    while ($row = db_fetch_array($res)) {
      $matches[$row['title'] . ' [nid:' . $row['nid'] . ']'] = check_plain($row['title']);
    }
  }
  drupal_json($matches);  
}
