<?php
/**
 * Implementation of hook_help ().
 */
function autocomplete_flag_select_help($path, $args) {
  if ($path == 'admin/help#autocomplete-flag-select') {
    $output = '<p>Allows you to flag a user with one of your nodes</p>';
    return $output;
  }
}

/**
 * Implementation of hook_perm ().
 */
function autocomplete_flag_select_perm() {
  return array('allow autocomplete flag select access',  'administer access to autocomplete flag select');
}

/**
 * Implementation of hook_init ().
 */
function autocomplete_flag_select_init() {
  $path = drupal_get_path('module', 'autocomplete_flag_select');
  drupal_add_css($path .'/autocomplete_flag_select.css');
}

/**
 * Implementation of hook_menu ().
 */
function  autocomplete_flag_select_menu() {
  $items['admin/build/flags/autocomplete_flag_select'] = array(
    'title' => 'Autocomplete flag select',
    'description' => 'Configure the autocomplete flag select.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocomplete_flag_select_settings_form'),
    'access arguments' => array('administer access to autocomplete flag select'),
    'file' => 'autocomplete_flag_select.admin.inc',
  );

  $items["autocomplete_flag_select/autocomplete"] = array(
    'title' => 'Autocomplete flag select',
    'page callback' => 'autocomplete_flag_select_autocomplete',
    'access arguments' => array('allow autocomplete flag select access'),
    'type' => MENU_CALLBACK
  );

  $items['unflag-node/%/%'] = array(
    'title' => 'Unflag node',
    'page callback' => '_autocomplete_flag_select_unflag_node',
    'page arguments' => array(1, 2),
    'access callback' => 'autocomplete_flag_select_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['flag-node/%/%'] = array(
    'title' => 'Flag node',
    'page callback' => '_autocomplete_flag_select_flag_node',
    'page arguments' => array(1, 2),
    'access callback' => 'autocomplete_flag_select_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function autocomplete_flag_select_access($nid = 0) {
  global $user;
  // get the node author UID
  $result = db_query('SELECT n.uid FROM {node} n WHERE n.nid = %d LIMIT 1', $nid);
  $uid = db_fetch_array($result);
  return (user_access('allow autocomplete flag select access') && $uid != $user->uid) || user_access('administer access to autocomplete flag select');
}

/**
 * Implementation of hook_block ().
 */
function autocomplete_flag_select_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  switch ($op) {
    //Define the block
    case 'list':
      $blocks[0]['info'] = t('Autocomplete flag select');
      return $blocks;
    break;

    case 'view':
      $flag_type = variable_get('autocomplete_flag_select_flag_fid', '');
      if (arg(0) == 'user' && is_numeric(arg(1)) && ($user->uid != arg(1)) && !empty($flag_type) && user_access('allow autocomplete flag select access')) {
        $block['content'] = drupal_get_form('autocomplete_flag_select_form', 'block');
        return $block;
      }else {
        return '';
      }
      break;
  }
}

/**
 * Implementation of hook_form ().
 */
function autocomplete_flag_select_form() {
  $form = array();

  global $user;
  $uid = 0;
  // get user to be flag
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $uid = arg(1);
    $form['flagged_user'] = array(
      '#type' => 'value',
      '#value' => $uid,
    );
  }

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#description' => t('Please enter node title to flag the user.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => 'autocomplete-flag-select'),
  );

  // get nodes user was flagged with
  $fid = theme('autocomplete_flag_select_nodes_flagged');
  $markup = '';
  foreach ($fid as $nid => $title) {
  $markup .= l($title, 'node/' . $nid) . l('X', 'unflag-node/' . $uid . '/' . $nid, array('attributes' => array('class' => 'remove-node'), 'query' => array('destination' => $_GET['q']))) . '<br/>';
  }

  $form['fields']['list'] = array(
    '#attributes' => array('class' => 'autocomplete-flag-select-title'),
    '#value' => $markup,
  );

  $form['fields']['node'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#autocomplete_path' => "autocomplete_flag_select/autocomplete",
  );

  // use custom submit handler
  $form['fields']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Shortlist'),
    '#submit' => array('autocomplete_flag_select_form_submit'),
    '#attributes' => array('class' => 'btn btn-block')
  );
  return $form;
}

/**
 * Implementation of hook_submit ().
 */
function autocomplete_flag_select_form_submit($form, &$form_state) {
  // Get the nid from submitted node title
  $start = strripos($form_state['values']['node'], '[nid:')+5;
  $nid = substr($form_state['values']['node'], $start, -1);

  $fid = variable_get('autocomplete_flag_select_flag_fid', '');
  if (!empty($fid) && !empty($nid)) {
    $flagged_user = user_load($form_state['values']['flagged_user']);
    // Flag node
    $flag = flag_get_flag(NULL, $fid) or die('no flag defined');
    if (!$flag->is_flagged($nid, $flagged_user->uid)) {
      $flag->flag('flag', $nid, $flagged_user);
      drupal_set_message($flag->flag_message);
    }
  } else
    drupal_set_message('Invalid node, and can\'t be flagged', 'error');
}

/**
 *  Check what nid to unflag.
 */
function _autocomplete_flag_select_unflag_node($uid, $nid) {
  // makesure integer values are supplied
  if (!is_numeric($uid) || !is_numeric($nid))
    return '';

  // Get the nid from submitted node title
  $fid = variable_get('autocomplete_flag_select_flag_fid', '');
  if (!empty($fid)) {
    $flagged_user = user_load($uid);
    // Unflag node
    $flag = flag_get_flag(NULL, $fid) or die('no flag defined');
    if ($flag->is_flagged($nid, $flagged_user->uid)) {
      $flag->flag('unflag', $nid, $flagged_user);
      drupal_set_message($flag->unflag_message);
    }
  }
  drupal_goto(drupal_get_destination());
  return '';
}

/**
 *  Check what nid to flag.
 */
function _autocomplete_flag_select_flag_node($uid, $nid) {
  // makesure integer values are supplied
  if (!is_numeric($uid) || !is_numeric($nid))
    return '';

  // Get the nid from submitted node title
  $fid = variable_get('autocomplete_flag_select_flag_fid', '');
  if (!empty($fid)) {
    $flagged_user = user_load($uid);
    // flag node
    $flag = flag_get_flag(NULL, $fid) or die('no flag defined');
    if (!$flag->is_flagged($nid, $flagged_user->uid)) {
      $flag->flag('flag', $nid, $flagged_user);
      drupal_set_message($flag->flag_message);
    }
  }
  drupal_goto(drupal_get_destination());
  return '';
}

/**
 * Implementation of hook_autocomplete ().
 */
function autocomplete_flag_select_autocomplete($string) {
  return theme('autocomplete_flag_select_autocomplete', $string);
}

/**
 * Implementation of hook_theme ().
 */
function autocomplete_flag_select_theme() {
  return array(
    // Themes for the formatters.
    'autocomplete_flag_select_autocomplete' => array(
      'arguments' => array('string' => ''),
    ),
    'autocomplete_flag_select_nodes_flagged' => array(),
  );
}

/**
 * Theme function for 'default' autocomplete flag select autocomplete.
 */
function theme_autocomplete_flag_select_autocomplete($string) {
  global $user;
  // Get the content type to search for.
  $select_type = variable_get('autocomplete_flag_select_node_type', '');
  $matches = array();
  // create the SQL to query the node table
  $sql = "SELECT n.nid, n.title FROM {node} n WHERE n.status = 1 AND n.type = '%s' AND lower(n.title) LIKE lower('%%%s%%') AND n.uid = %d ORDER BY n.title ASC";

  // query the database
  if (!empty($select_type)) {
    $res = db_query_range($sql, $select_type, $string, $user->uid, 0, 10);
    while ($row = db_fetch_array($res)) {
      $matches[$row['title'] . ' [nid:' . $row['nid'] . ']'] = check_plain($row['title']);
    }
  }
  return drupal_json($matches);
}

/**
 * Theme function for 'default' autocomplete flag select nodes flagged.
 */
function theme_autocomplete_flag_select_nodes_flagged() {
  global $user;
  // Get the content type to search for.
  $content_type = variable_get('autocomplete_flag_select_node_type', '');

  $matches = array();

  $fid = variable_get('autocomplete_flag_select_flag_fid', '');
  $sql = db_query("SELECT n.nid, n.title FROM {node} n INNER JOIN {flag_content} f ON n.nid = f.content_id WHERE n.status = 1 AND n.uid = %d AND n.type = '%s' AND f.uid = %d AND f.fid = %d", $user->uid, $content_type, arg(1), $fid);

  $matches = array();
  //assigns the actual values into an array
  while ($row = db_fetch_array($sql)) {
    $matches[$row['nid']] = $row['title'];
  }
  return $matches;
}
