<?php
/**
 * Implementation of hook_help()
 */
function autocomplete_flag_select_help($path, $args) {
  if ($path == 'admin/help#autocomplete-flag-select') {
    $output = '<p>Allows you to flag a user with one of your nodes</p>';
    return $output;
  }
}

/**
 * Implementation of hook_menu()
 */
function  autocomplete_flag_select_menu() {   
  // $items['autocomplete_flag_select/autocomplete/%'] = array(
    // 'page callback' => 'autocomplete_flag_select_autocomplete',
    // 'page arguments' => array(2),
    // 'type' => MENU_CALLBACK,
    // 'access arguments' => array('access example autocomplete'),
  // );
  $items['admin/settings/autocomplete_flag_select'] = array(
    'title' => 'Autocomplete flag select',
    'description' => 'Configure the autocomplete flag select.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocomplete_flag_select_settings_form'),
    'access arguments' => array(1),
    'file' => 'autocomplete_flag_select.admin.inc',
  );
  
  $items["autocomplete_flag_select/autocomplete"] = array(
    'title' => 'Autocomplete flag select',
    'page callback' => 'autocomplete_flag_select_autocomplete',
    'access callback' =>TRUE,
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
   );
  return $items;
}

/**
 * Implementation of hook_block()
 */
function autocomplete_flag_select_block($op = 'list', $delta = 0, $edit = array()) {
  $select_type = variable_get('autocomplete_flag_permission_types', array());
  if (!empty($select_type)){
   switch ($op) {
     //Define the block
     case 'list':
       $blocks[0]['info'] = t('Autocomplete flag select');
       return $blocks;
        
     case 'view': 
       // $block['subject'] = t('Shortlist for position');       
       $block['content'] = drupal_get_form('autocomplete_flag_select_form', 'block'); 
       return $block;
   }
  } 
}

/**
* Implementation of hook_form()
*/
function autocomplete_flag_select_form() {
  $form = array();          
  $form['fields'] = array(
  '#type' => 'fieldset',
  '#title' => t('Shortlist for position'),
  // '#description' => t('Please note that you have to right click to view source and find the correct variables.'),
  '#collapsible' => FALSE,
  '#collapsed' => FALSE,
  '#attributes' => array('class' => 'autocomplete-flag-select'),
  ); 
  
  $form['fields']['nid'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#autocomplete_path' => "autocomplete_flag_select/autocomplete",
  );
  
  // use custom submit handler
  $form['fields']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Shortlist'),
    '#submit' => array('autocomplete_flag_select_form_submit'),
  );
  return $form;
}
/**
 * Implementation of hook_autocomplete()
 */
function autocomplete_flag_select_autocomplete($string) {
  global $user;
  // Get the content type to search for.
  $select_type = variable_get('autocomplete_flag_permission_type', '');
  dpm($select_type);
  $matches = array();
  // create the SQL to query the node table
  $sql = "SELECT n.nid, n.title FROM {node} n WHERE n.status = 1 AND n.type = '%s' AND lower(n.title) LIKE lower('%%%s%%') AND n.uid = %d ORDER BY n.title ASC";

  // query the database
  if (!empty($select_type)) {
    $res = db_query_range($sql, $select_type, $string, $user->uid, 0, 10);
    while ($row = db_fetch_array($res)) {
      $matches[$row['title'] . ' [nid:' . $row['nid'] . ']'] = check_plain($row['title']);
    }
  }
  drupal_json($matches);  
}

function autocomplete_flag_select_form_submit($form, &$form_state) {
  
  // Get the nid from form
  $str_autocomplete = $form_state['values']['nid'];
  $str_rev = strrev($str_autocomplete);
  $int_firstChar = strpos($str_rev, ':');
  $str_unsorted = substr($str_rev, 0, $int_firstChar);
  $str_revUnsorted = strrev($str_unsorted);
  $int_lastChar = strpos($str_revUnsorted, ']');
  $str_sorted = substr($str_revUnsorted,0, $int_lastChar);
  $flag_node = $str_sorted; 
  
  //Retrieve all the flag names
  $flags = flag_get_flags();
  
  $flag_fid= array();
    foreach ($flags as $flag) {
      $flag_fid[$flag->fid] = $flag->name;
    }  
  
  $flag_get = variable_get('autocomplete_flag_type', '');
  if(!empty($flag_get)) {
    $flag = flag_get_flag($flag_fid[$flag_get]) or die('no '.$flag_fid[$flag_get].' flag defined');
    
    // Flag node
    if ($flag->is_flagged($flag_node)) {
      $flag->flag('unflag', $flag_node);
    } else {
       $flag->flag('flag', $flag_node);
    }  
  }
}