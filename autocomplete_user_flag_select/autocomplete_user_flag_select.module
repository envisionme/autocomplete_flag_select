<?php
/**
 * Implementation of hook_help().
 */
function autocomplete_user_flag_select_help($path, $args) {
  if ($path == 'admin/help#autocomplete-user-flag-select') {
    $output = '<p>Allows you to flag a user when searching for user</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function autocomplete_user_flag_select_perm() {
  return array('allow autocomplete user flag select access','administer access to autocomplete user flag select');
}

/**
 *  Implementation of hook_init().
 */
function autocomplete_user_flag_select_init() {
  $path = drupal_get_path('module', 'autocomplete_user_flag_select_select');
}

/**
 * Implementation of hook_menu().
 */
function autocomplete_user_flag_select_menu() {
  //Create the menu path to settings page
  $items['admin/build/flags/autocomplete_user_flag_select'] = array(
    'title' => 'Autocomplete user flag select',
    'description' => 'Configure the autocomplete user flag select.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocomplete_user_flag_select_settings_form'),
    'access arguments' => array('administer access to autocomplete user flag select'),
    'file' => 'autocomplete_user_flag_select.admin.inc',
  );
  // create menu path to autocomplete textfield
  $items["autocomplete_user_flag_select/autocomplete"] = array(
    'title' => 'Autocomplete user flag select',
    'page callback' => 'autocomplete_user_flag_select_autocomplete',
    'access arguments' => array('allow autocomplete user flag select access'),
    'type' => MENU_CALLBACK
  );
  // unflag the user if global user desides to delete user from list
  $items['unflag-user/%'] = array(
    'title' => 'Unflag user',
    'page callback' => '_autocomplete_user_flag_select_unflag_user',
    'page arguments' => array(1, 2),
    'access callback' => 'autocomplete_user_flag_select_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_access().
 */
function autocomplete_user_flag_select_access($nid=0) {
  global $user;
  // get the node author UID
  $result = db_query('SELECT n.uid FROM {node} n WHERE n.nid = %d LIMIT 1', $nid);
  $uid = db_fetch_array($result);
  return (user_access('allow autocomplete user flag select access')) || user_access('administer access to autocomplete user flag select');
}

/**
 * Implementation of hook_block ().
 */
function autocomplete_user_flag_select_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    //Define the block
    case 'list':
      $blocks[0]['info'] = t('Autocomplete user flag select');
      return $blocks;
    break;

    case 'view':
    $fid = variable_get('autocomplete_user_flag_select_flag_fid', '');
    // Check if user is logged in and has permission to access block
    if (!empty($fid) && user_access('allow autocomplete user flag select access')){
        $block['content'] = drupal_get_form('autocomplete_user_flag_select_form', 'block');
        return $block;
    }
    break;
  }
}

/**
 * Implementation of hook_form ().
 */
function autocomplete_user_flag_select_form() {
  $form = array();

  global $user;
  $uid = 0;
  // get user to be flag
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $uid = arg(1);
    $form['flagged_user'] = array(
      '#type' => 'value',
      '#value' => $uid,
    );
  }

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#description' => t('Please enter username to flag.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => 'autocomplete-flag-select'),
  );

  // get nodes user was flagged with
  $flagged_users = theme('autocomplete_user_flag_select_users_flagged');
  $markup = '';
  foreach ($flagged_users as $uid => $title) {
    $name = theme('username', user_load($uid), array('plain' => TRUE));
    $markup .= l($name,'user/'.$uid, array('attributes' => array('target' => '_blank'))) . ' ' . l('X', 'unflag-user/' . $uid , array('attributes' => array('class' => 'remove-user'), 'query' => array('destination' => $_GET['q']))) . '<br/>';
}

  $form['fields']['list'] = array(
    '#attributes' => array('class' => 'autocomplete-user-flag-select-title'),
    '#value' => $markup,
  );

  $form['fields']['user'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#autocomplete_path' => "autocomplete_user_flag_select/autocomplete",
  );

  // use custom submit handler
  $form['fields']['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('autocomplete_user_flag_select_form_submit'),
  );
  return $form;
}

/**
 * Implementation of hook_submit ().
 */
function autocomplete_user_flag_select_form_submit($form, &$form_state) {
  global $user;
  // Get the uid from submitted user name
  $start = strripos($form_state['values']['user'], '[uid:')+5;
  $uid = substr($form_state['values']['user'], $start, -1);
  $fid = variable_get('autocomplete_user_flag_select_flag_fid', '');
  if (!empty($fid) && !empty($uid)) {
    // Flag node
    $flag = flag_get_flag(NULL, $fid) or die('no flag defined');

    $company_uid = _autocomplete_user_flag_select_is_flagged($uid);
    $company_profile = get_user_profile($company_uid->company_uid);
    $user_profile = get_user_profile($company_uid->uid);
    // check if user has not been flagged already
    if ($user->uid == $company_uid->company_uid) {
      // global user flag user that was search for if not yet flagged
      $flag->flag('flag', $uid, $user);
    }else{
      drupal_set_message(t(theme('username', $user_profile).' was already added as collaborator for '.theme('username', $company_profile)),'error');
    }
  }
}

/**
 * Implementation of hook_autocomplete ().
 */
function autocomplete_user_flag_select_autocomplete($string) {
  return theme('autocomplete_user_flag_select_autocomplete', $string);
}

/**
 *  Check what uid to unflag.
 */
function _autocomplete_user_flag_select_unflag_user($uid) {
  global $user;
  // make sure integer values are supplied
  if (!is_numeric($uid))
    return '';

  // get fid from flag that was selected to be unflagged
  $fid = variable_get('autocomplete_user_flag_select_flag_fid', '');
  if (!empty($fid)) {
    // Unflag node
    $flag = flag_get_flag(NULL, $fid) or die('no flag defined');
    if ($flag->is_flagged($uid, $user->uid)) {
      $flag->flag('unflag', $uid, $user);
    }
  }
  // when unflagged go back to destination where the action was performed
  drupal_goto(drupal_get_destination());
  return '';
}

/**
 * Implementation of hook_theme ().
 */
function autocomplete_user_flag_select_theme() {
  return array(
    // Themes for the formatters.
    'autocomplete_user_flag_select_autocomplete' => array(
      'arguments' => array('string' => ''),
    ),
    'autocomplete_user_flag_select_users_flagged' => array(),
  );
}

/**
 * Theme function for 'default' autocomplete user flag select autocomplete.
 */
function theme_autocomplete_user_flag_select_autocomplete($string) {
  $matches = array();
  // get text that have been filled in and autocomplete the text with a list of information generated from system,
  // in this case we would like to find all the user in the system
  $result = db_query("SELECT u.uid, u.name FROM {users} u WHERE u.name LIKE '%s%%' ",$string);
    while ($row = db_fetch_array($result)) {
      $matches[$row['name'] . ' [uid:' . $row['uid'] . ']'] = check_plain($row['name']);
    }
  return drupal_json($matches);
}

/**
 * Theme function for 'default' autocomplete user flag select users flagged.
 */
function theme_autocomplete_user_flag_select_users_flagged() {
  global $user;
  $fid = variable_get('autocomplete_user_flag_select_flag_fid', '');
  $result = db_query("SELECT u.uid, u.name FROM {users} u INNER JOIN {flag_content} f ON u.uid = f.content_id WHERE f.uid = %d  AND f.fid = %d", $user->uid, $fid);

  $matches = array();
  //assigns the actual values into an array
  while ($row = db_fetch_array($result)) {
    $matches[$row['uid']] = $row['name'];
  }
  // Print out all users that have been flagged by company
  return $matches;
}

function _autocomplete_user_flag_select_is_flagged($uid) {
  // get flag type's fid that was selected by user
  $fid = variable_get('autocomplete_user_flag_select_flag_fid', '');
  // get all user that have been flagged by global user
  $result = db_query("SELECT f.content_id AS uid, f.uid AS company_uid FROM {flag_content} f WHERE f.fid = %d AND f.content_id = %d", $fid, $uid);
  $row = db_fetch_object($result);
  if (!empty($row)) {
    return $row;
  }
  return false;
}
